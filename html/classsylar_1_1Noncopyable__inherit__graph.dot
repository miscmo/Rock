digraph "rock::Noncopyable"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{rock::Noncopyable\n||+ Noncopyable()\l+ ~Noncopyable()\l+ Noncopyable()\l+ operator=()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="对象无法拷贝,赋值"];
  Node1 -> Node2 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{rock::CASLock\n||+ CASLock()\l+ ~CASLock()\l+ lock()\l+ unlock()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classrock_1_1CASLock.html",tooltip="原子锁"];
  Node1 -> Node3 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{rock::FiberSemaphore\n||+ FiberSemaphore()\l+ ~FiberSemaphore()\l+ tryWait()\l+ wait()\l+ notify()\l+ getConcurrency()\l+ reset()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classrock_1_1FiberSemaphore.html",tooltip=" "];
  Node1 -> Node4 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{rock::Mutex\n||+ Mutex()\l+ ~Mutex()\l+ lock()\l+ unlock()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classrock_1_1Mutex.html",tooltip="互斥量"];
  Node1 -> Node5 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{rock::NullMutex\n||+ NullMutex()\l+ ~NullMutex()\l+ lock()\l+ unlock()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classrock_1_1NullMutex.html",tooltip="空锁(用于调试)"];
  Node1 -> Node6 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{rock::NullRWMutex\n||+ NullRWMutex()\l+ ~NullRWMutex()\l+ rdlock()\l+ wrlock()\l+ unlock()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classrock_1_1NullRWMutex.html",tooltip="空读写锁(用于调试)"];
  Node1 -> Node7 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 [label="{rock::RWMutex\n||+ RWMutex()\l+ ~RWMutex()\l+ rdlock()\l+ wrlock()\l+ unlock()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classrock_1_1RWMutex.html",tooltip="读写锁"];
  Node1 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 [label="{rock::SchedulerSwitcher\n||+ SchedulerSwitcher()\l+ ~SchedulerSwitcher()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classrock_1_1SchedulerSwitcher.html",tooltip=" "];
  Node1 -> Node9 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node9 [label="{rock::Semaphore\n||+ Semaphore()\l+ ~Semaphore()\l+ wait()\l+ notify()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classrock_1_1Semaphore.html",tooltip="信号量"];
  Node1 -> Node10 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node10 [label="{rock::Socket\n|# m_sock\l# m_family\l# m_type\l# m_protocol\l# m_isConnected\l# m_localAddress\l# m_remoteAddress\l|+ Socket()\l+ ~Socket()\l+ getSendTimeout()\l+ setSendTimeout()\l+ getRecvTimeout()\l+ setRecvTimeout()\l+ getOption()\l+ getOption()\l+ setOption()\l+ setOption()\l和 29 更多...\l+ CreateTCP()\l+ CreateUDP()\l+ CreateTCPSocket()\l+ CreateUDPSocket()\l+ CreateTCPSocket6()\l+ CreateUDPSocket6()\l+ CreateUnixTCPSocket()\l+ CreateUnixUDPSocket()\l# initSock()\l# newSock()\l# init()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classrock_1_1Socket.html",tooltip="Socket封装类"];
  Node10 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node11 [label="{rock::SSLSocket\n||+ SSLSocket()\l+ accept()\l+ bind()\l+ connect()\l+ listen()\l+ close()\l+ send()\l+ send()\l+ sendTo()\l+ sendTo()\l和 6 更多...\l+ CreateTCP()\l+ CreateTCPSocket()\l+ CreateTCPSocket6()\l# init()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classrock_1_1SSLSocket.html",tooltip=" "];
  Node1 -> Node12 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node12 [label="{rock::Spinlock\n||+ Spinlock()\l+ ~Spinlock()\l+ lock()\l+ unlock()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classrock_1_1Spinlock.html",tooltip="自旋锁"];
  Node1 -> Node13 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node13 [label="{rock::TcpServer\n|# m_socks\l# m_worker\l# m_ioWorker\l# m_acceptWorker\l# m_recvTimeout\l# m_name\l# m_type\l# m_isStop\l# m_ssl\l# m_conf\l|+ TcpServer()\l+ ~TcpServer()\l+ bind()\l+ bind()\l+ loadCertificates()\l+ start()\l+ stop()\l+ getRecvTimeout()\l+ getName()\l+ setRecvTimeout()\l和 7 更多...\l# handleClient()\l# startAccept()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classrock_1_1TcpServer.html",tooltip="TCP服务器封装"];
  Node13 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node14 [label="{rock::http::HttpServer\n||+ HttpServer()\l+ getServletDispatch()\l+ setServletDispatch()\l+ setName()\l# handleClient()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classrock_1_1http_1_1HttpServer.html",tooltip="HTTP服务器类"];
  Node13 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node15 [label="{rock::http::WSServer\n|# m_dispatch\l|+ WSServer()\l+ getWSServletDispatch()\l+ setWSServletDispatch()\l# handleClient()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classrock_1_1http_1_1WSServer.html",tooltip=" "];
  Node13 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node16 [label="{rock::RockServer\n||+ RockServer()\l# handleClient()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classrock_1_1RockServer.html",tooltip=" "];
  Node1 -> Node17 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node17 [label="{rock::Thread\n||+ Thread()\l+ ~Thread()\l+ getId()\l+ getName()\l+ join()\l+ GetThis()\l+ GetName()\l+ SetName()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classrock_1_1Thread.html",tooltip="线程类"];
  Node1 -> Node18 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node18 [label="{rock::WorkerGroup\n||+ WorkerGroup()\l+ ~WorkerGroup()\l+ schedule()\l+ waitAll()\l+ Create()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classrock_1_1WorkerGroup.html",tooltip=" "];
}
