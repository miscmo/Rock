digraph "rock::RockStream"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{rock::RockStream\n||+ RockStream()\l+ ~RockStream()\l+ sendMessage()\l+ request()\l+ getRequestHandler()\l+ getNotifyHandler()\l+ setRequestHandler()\l+ setNotifyHandler()\l+ setData()\l+ getData()\l# doRecv()\l# handleRequest()\l# handleNotify()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{rock::AsyncSocketStream\n|# m_queue\l# m_ctxs\l# m_sn\l# m_autoConnect\l# m_timer\l# m_connectCb\l# m_disconnectCb\l# m_data\l|+ AsyncSocketStream()\l+ start()\l+ close()\l+ setWorker()\l+ getWorker()\l+ setIOManager()\l+ getIOManager()\l+ isAutoConnect()\l+ setAutoConnect()\l+ getConnectCb()\l+ getDisconnectCb()\l+ setConnectCb()\l+ setDisconnectCb()\l+ setData()\l+ getData()\l# doRead()\l# doWrite()\l# startRead()\l# startWrite()\l# onTimeOut()\l# doRecv()\l# getCtx()\l# getAndDelCtx()\l# getCtxAs()\l# getAndDelCtxAs()\l# addCtx()\l# enqueue()\l# innerClose()\l# waitFiber()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classrock_1_1AsyncSocketStream.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{rock::SocketStream\n|# m_socket\l# m_owner\l|+ SocketStream()\l+ ~SocketStream()\l+ read()\l+ read()\l+ write()\l+ write()\l+ close()\l+ getSocket()\l+ isConnected()\l+ getRemoteAddress()\l+ getLocalAddress()\l+ getRemoteAddressString()\l+ getLocalAddressString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classrock_1_1SocketStream.html",tooltip="Socket流"];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{rock::Stream\n||+ ~Stream()\l+ read()\l+ read()\l+ readFixSize()\l+ readFixSize()\l+ write()\l+ write()\l+ writeFixSize()\l+ writeFixSize()\l+ close()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classrock_1_1Stream.html",tooltip="流结构"];
  Node5 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{std::enable_shared\l_from_this\< AsyncSocketStream \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node6 -> Node2 [color="grey25",fontsize="10",style="solid",label=" #m_queueMutex\n#m_mutex" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{rock::RWMutex\n||+ RWMutex()\l+ ~RWMutex()\l+ rdlock()\l+ wrlock()\l+ unlock()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classrock_1_1RWMutex.html",tooltip="读写锁"];
  Node7 -> Node6 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 [label="{rock::Noncopyable\n||+ Noncopyable()\l+ ~Noncopyable()\l+ Noncopyable()\l+ operator=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classrock_1_1Noncopyable.html",tooltip="对象无法拷贝,赋值"];
  Node8 -> Node2 [color="grey25",fontsize="10",style="solid",label=" #m_worker\n#m_iomanager" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{rock::IOManager\n||+ IOManager()\l+ ~IOManager()\l+ addEvent()\l+ delEvent()\l+ cancelEvent()\l+ cancelAll()\l+ GetThis()\l# tickle()\l# stopping()\l# idle()\l# onTimerInsertedAtFront()\l# contextResize()\l# stopping()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classrock_1_1IOManager.html",tooltip="基于Epoll的IO协程调度器"];
  Node9 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node9 [label="{rock::Scheduler\n|# m_threadIds\l# m_threadCount\l# m_activeThreadCount\l# m_idleThreadCount\l# m_stopping\l# m_autoStop\l# m_rootThread\l|+ Scheduler()\l+ ~Scheduler()\l+ getName()\l+ start()\l+ stop()\l+ schedule()\l+ schedule()\l+ switchTo()\l+ dump()\l+ GetThis()\l+ GetMainFiber()\l# tickle()\l# run()\l# stopping()\l# idle()\l# setThis()\l# hasIdleThreads()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classrock_1_1Scheduler.html",tooltip="协程调度器"];
  Node10 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node10 [label="{rock::TimerManager\n||+ TimerManager()\l+ ~TimerManager()\l+ addTimer()\l+ addConditionTimer()\l+ getNextTimer()\l+ listExpiredCb()\l+ hasTimer()\l# onTimerInsertedAtFront()\l# addTimer()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classrock_1_1TimerManager.html",tooltip="定时器管理器"];
  Node11 -> Node2 [color="grey25",fontsize="10",style="solid",label=" #m_sem\n#m_waitSem" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 [label="{rock::FiberSemaphore\n||+ FiberSemaphore()\l+ ~FiberSemaphore()\l+ tryWait()\l+ wait()\l+ notify()\l+ getConcurrency()\l+ reset()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classrock_1_1FiberSemaphore.html",tooltip=" "];
  Node7 -> Node11 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
}
