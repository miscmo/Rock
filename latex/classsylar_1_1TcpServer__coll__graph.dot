digraph "sylar::TcpServer"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{sylar::TcpServer\n|# m_socks\l# m_recvTimeout\l# m_name\l# m_type\l# m_isStop\l# m_ssl\l# m_conf\l|+ TcpServer()\l+ ~TcpServer()\l+ bind()\l+ bind()\l+ loadCertificates()\l+ start()\l+ stop()\l+ getRecvTimeout()\l+ getName()\l+ setRecvTimeout()\l和 7 更多...\l# handleClient()\l# startAccept()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="TCP服务器封装"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{std::enable_shared\l_from_this\< TcpServer \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node3 -> Node1 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal"];
  Node3 [label="{sylar::Noncopyable\n||+ Noncopyable()\l+ ~Noncopyable()\l+ Noncopyable()\l+ operator=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsylar_1_1Noncopyable.html",tooltip="对象无法拷贝,赋值"];
  Node4 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #m_ioWorker\n#m_worker\n#m_acceptWorker" ,arrowhead="odiamond"];
  Node4 [label="{sylar::IOManager\n||+ IOManager()\l+ ~IOManager()\l+ addEvent()\l+ delEvent()\l+ cancelEvent()\l+ cancelAll()\l+ GetThis()\l# tickle()\l# stopping()\l# idle()\l# onTimerInsertedAtFront()\l# contextResize()\l# stopping()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsylar_1_1IOManager.html",tooltip="基于Epoll的IO协程调度器"];
  Node5 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node5 [label="{sylar::Scheduler\n|# m_threadIds\l# m_threadCount\l# m_activeThreadCount\l# m_idleThreadCount\l# m_stopping\l# m_autoStop\l# m_rootThread\l|+ Scheduler()\l+ ~Scheduler()\l+ getName()\l+ start()\l+ stop()\l+ schedule()\l+ schedule()\l+ switchTo()\l+ dump()\l+ GetThis()\l+ GetMainFiber()\l# tickle()\l# run()\l# stopping()\l# idle()\l# setThis()\l# hasIdleThreads()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsylar_1_1Scheduler.html",tooltip="协程调度器"];
  Node6 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node6 [label="{sylar::TimerManager\n||+ TimerManager()\l+ ~TimerManager()\l+ addTimer()\l+ addConditionTimer()\l+ getNextTimer()\l+ listExpiredCb()\l+ hasTimer()\l# onTimerInsertedAtFront()\l# addTimer()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsylar_1_1TimerManager.html",tooltip="定时器管理器"];
}
